= glutton_lastfm

Simple last.fm API wrapper written using HTTParty. A last.fm API key is required.

See: 

* http://last.fm/api
* http://httparty.rubyforge.org

== Methods

* <tt>artist_search( artist_name )</tt> - http://www.last.fm/api/show/?service=272
* <tt>artist_info( artist_name )</tt> - http://www.last.fm/api/show/?service=267
* <tt>artist_info_by_mbid( artist_musicbrainz_id )</tt> - http://www.last.fm/api/show/?service=267
* <tt>artist_top_albums( artist_name )</tt> - http://www.last.fm/api/show/?service=287
* <tt>artist_top_tracks( artist_name )</tt> - http://www.last.fm/api/show/?service=277
* <tt>atrist_top_tags( artist_name )</tt> - http://www.last.fm/api/show/?service=288
* <tt>artist_events( artist_name )</tt> - http://www.last.fm/api/show/?service=117
* <tt>album_search( album_name, artist_name )</tt> - http://www.last.fm/api/show?service=357
* <tt>album_info( album_name )</tt> - http://www.last.fm/api/show?service=290
* <tt>album_info_by_mbid( album_musicbrainz_id )</tt> - http://www.last.fm/api/show?service=290

== Examples

    require 'rubygems'
    require 'glutton_lastfm'
    require 'pp'
    
    last = GluttonLastfm.new '<your last.fm API key>'
    
    artist = 'Green Day'
    
    artist_search       = last.artist_search artist
    artist_info         = last.artist_info artist
    artist_info_by_mbid = last.artist_info_by_mbid '084308bd-1654-436f-ba03-df6697104e19'
    artist_top_albums   = last.artist_top_albums artist
    artist_top_tracks   = last.artist_top_tracks artist
    artist_top_tags     = last.artist_top_tags artist
    artist_events       = last.artist_events artist
    
    album = 'Dookie'
    
    album_search       = last.album_search album
    album_info         = last.album_info artist, album
    album_info_by_mbid = last.album_info_by_mbid '17ca17ed-f061-4d5b-97e2-848d85e47d95'
    
    # Inspect any of the returned structures using pp (pretty print):
    
    pp album_info
    
== Query Responses

Queries to glutton_lastfm methods return hierarchical hash / array strucutres.

As shown above it is best to familarize yourself with the returned data using <tt>pp</tt>.

Here's a look at the returned data in a pseudo-structure. In reality all hash keys are strings.

* artist_info
* artist_info_by_mbid
      artist info{
        name
        mbid
        url
        image[]
        similar{ artist }[]{ name url image[] }
        tags{ tag }[]{ name url }
        bio{ published summary content }
      }
* album_info
* album_info_by_mbid
      album_info{
        name
        artist
        releasedate
        url
        id
        mbid
        toptags{ tag }[]{ name url }
        image[]
        wiki{ published content summary}
      }
* artist_search
      artist_search[]{
        name
        url
        mbid
        image[]
      }
* album_search
      album_search[]{
        name
        url
        mbid
        image[]
      }
* artist_top_albums
      artist_top_albums[]{
        name
        mbid
        rank
        image[]
        artist{ name url mbid }
        url
      }
* artist_top_tracks
      artist_top_tracks[]{
        name
        artist{ name url mbid }
        url
        rank
        mbid
        image[]
      }
* atrist_top_tags
      artist_top_tags[]{
        name
        url
        count
      }
* artist_events
      artist_events[]{
        artists{ artist headliner }
        title
        url
        startDate
        id
        tags{ tag }[]
        website
        tickets
        venue{ name website location{ city country postalcode street geo:point } }
        description
        image[]
      }

== License

This is free and unencumbered software released into the public domain. See LICENSE for details.
